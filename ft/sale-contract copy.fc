;; Persistent storage
global int token_rate;  ;; Token rate set during deployment
global slice owner_addr_cell;  ;; Store the owner's address as a cell, not slice
global int ton_balance;  ;; TON balance collected from sales
global int whitelist;  ;; TON balance collected from sales
global cell project_id;  ;; TON balance collected from sales
global int status;  ;; TON balance collected from sales

global slice token_address;  ;; Store the owner's address as a cell, not slice
global int startTime;  ;; TON balance collected from sales
global int endTime;  ;; TON balance collected from sales
global int minBuy;  ;; TON balance collected from sales
global int maxBuy;  ;; TON balance collected from sales
global int hardCap;  ;; TON balance collected from sales
global int softCap;  ;; TON balance collected from sales
global int liquidityAmount;  ;; TON balance collected from sales
global int liquidityRate;  ;; TON balance collected from sales

;; Store each user's token balance in a dictionary (map)
global cell users_contribution;  ;; (Address => Token balance)
;; global cell users_whitelisted;  ;; (Address => Token balance)

;; address utils

const int ADDRESS_SIZE = 264; ;; 256 + 8
;; Function to handle incoming transactions (buying tokens)


() load_data() impure inline_ref {
    slice ds = get_data().begin_parse();
    token_rate = ds~load_coins() ;
    ton_balance = ds~load_coins() ;
    status = ds~load_uint(8); ;; status
    startTime = ds~load_uint(32); ;; startTime 
    endTime = ds~load_uint(32); ;; endTime 
    minBuy = ds~load_coins(); ;; minBuy 
    maxBuy = ds~load_coins(); ;; maxBuy 
    hardCap = ds~load_coins(); ;; hardCap 
    softCap = ds~load_coins(); ;; softCap 
    ;; liquidityAmount = ds~load_coins(); ;; liquidityAmount 
    ;; liquidityRate = ds~load_coins(); ;; whitelist  
    whitelist = ds~load_uint(8); ;; whitelist  
    token_address = ds~load_msg_addr(); ;; token_address 
    users_contribution =   ds~load_dict(); ;; users_contribution 
    owner_addr_cell =  ds~load_msg_addr(); ;; owner_addr_cell
    project_id =  ds~load_ref(); ;; project_id
    ds.end_parse();
}

 



() save_data() impure inline_ref {
    set_data(begin_cell()
            .store_coins(token_rate)
            .store_coins(ton_balance)
            .store_uint(status,8)
            .store_uint(startTime,32)
            .store_uint(endTime,32)
            .store_coins(minBuy)
            .store_coins(maxBuy)
            .store_coins(hardCap)
            .store_coins(softCap)
            ;; .store_coins(liquidityAmount)
            ;; .store_coins(liquidityRate)
            .store_uint(whitelist,8)
            .store_slice(token_address) 
            .store_dict(users_contribution)
            .store_slice(owner_addr_cell) 
            .store_ref(project_id) 
            .end_cell()
    );
}



(slice, int) dict_get?(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT";
;; cell dict_set_builder(cell dict, int key_len, slice index, builder value) asm(value index dict key_len) "DICTSETB";

slice pack_address(slice address) inline {
    (int wc, int address_hash) = parse_std_addr(address);
    return begin_cell().store_int(wc, 8).store_uint(address_hash, 256).end_cell().begin_parse();
}


;; () recv_internal() {
;;     ;; Handle the internal message
;;     return ();
;; }
 

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {

    ;; Check if the incoming message is internal and carries value
   
 
    int op = in_msg_body~load_uint(8);
    cell _project_id = in_msg_body~load_ref();
    slice address = in_msg_body~load_msg_addr(); 
    
    ;; initialize
    if (op == 1) {
 
        int _status = in_msg_body~load_uint(8);
        int _whitelist = in_msg_body~load_uint(8);
        int _token_rate = in_msg_body~load_coins();

        int _startTime = in_msg_body~load_uint(32);
        int _endTime = in_msg_body~load_uint(32);
        int _minBuy = in_msg_body~load_coins();
        int _maxBuy = in_msg_body~load_coins();
        int _hardCap = in_msg_body~load_coins();
        int _softCap = in_msg_body~load_coins();
        ;; int _liquidityAmount = in_msg_body~load_coins();
        ;; int _liquidityRate = in_msg_body~load_coins();        
        slice _token_address = in_msg_body~load_msg_addr();
        cell storage_cell = get_data();
        slice ds = storage_cell.begin_parse();

        if(ds~load_coins()){
            return ();
        }
        ;; token_rate = _token_rate;
        ;; if (ds.slice_bits() == 0) {
           
        ;; }

        ;;  load_data();

            token_rate = _token_rate;     
            ton_balance = 0;
            status = _status ;
            whitelist = _whitelist ;
            users_contribution = null();
            owner_addr_cell = address;

            startTime = _startTime;
            endTime = _endTime;
            minBuy = _minBuy;
            maxBuy = _maxBuy;
            hardCap = _hardCap;
            softCap = _softCap;
            liquidityAmount = _liquidityAmount;
            liquidityRate = _liquidityRate;
            token_address = _token_address;

            project_id = _project_id   ;


            save_data();    

        return ();

    }

    ;; purchase
    if (op == 2) {
        int ton_sent = msg_value ;
        load_data();
        if(status != 1){
            return ();
        }

        ;; int tokens_to_sell = ton_sent * token_rate; 
        ;; Get the sender's address and update their token balance
        ;; int _user_tokens = map_get(users_contribution, msg_sender(), 0);  ;; Get existing tokens

        (slice value, int _old_user_tokens) = users_contribution.dict_get?(ADDRESS_SIZE, pack_address(address));

        int _user_tokens = ton_sent ; 
        if(_old_user_tokens == -1){
        int _coins = value~load_coins(); 
        _user_tokens = _coins + ton_sent;
        }
       

        ;; if(_user_tokens == -1){
        ;;     _user_tokens = 10000000 ; 
        ;; }

       
       
        ;; map_set(users_contribution, msg_sender(), user_tokens);  ;; Store updated token balance
        ;; users_contribution~dict_set_builder(ADDRESS_SIZE, pack_address(address), begin_cell().store_int(-1, 1));
        ;; users_contribution~dict_set_builder(users_contribution, ADDRESS_SIZE, pack_address(address), begin_cell().store_int(-1, 32));
        users_contribution~dict_set_builder(ADDRESS_SIZE, pack_address(address), begin_cell().store_coins(_user_tokens));

        ;; whitelist~dict_set_builder(ADDRESS_SIZE, pack_address(whitelist_address), begin_cell().store_int(-1, 1));
        
        ;; Increase the TON balance
        ton_balance = ton_balance + ton_sent;
        save_data();

        ;; builder msg = begin_cell() 
        ;;     .store_slice(address) 
        ;;     .store_slice(project_id) ; 

        ;; send_raw_message(msg.end_cell(), 64);
        return ();

    }
 
       

      

}


int jetton_transfer(slice jetton_wallet, slice recipient, int jetton_amount, int forward_ton_amount, slice payload) impure {
    ;; Prepare the internal message to call transfer function on the jetton wallet contract
    ;; 1. Jetton wallet address (to call transfer function)
    ;; 2. The transfer function ID and its arguments

    ;; Define the method ID for the transfer function (as per the Jetton wallet contract)
    int transfer_method_id = 0x18d4e091;  ;; This is the method ID for the "transfer" function

    ;; Create a builder for the internal message to the jetton wallet
    builder msg_builder = begin_cell();
    msg_builder = msg_builder.store_uint(transfer_method_id, 32);  ;; Store the transfer method ID (32 bits)
    msg_builder = msg_builder.store_coins(jetton_amount);          ;; Store the amount of jettons to transfer
    msg_builder = msg_builder.store_slice(recipient);              ;; Store the recipient's address (slice)
    msg_builder = msg_builder.store_slice(payload);                ;; Store any forward payload (optional)

    ;; Send the message to the jetton wallet contract
    return send_raw_message(jetton_wallet, forward_ton_amount, msg_builder.end_cell());
}


;; ;; Function to claim tokens (users can claim their tokens)
;; int claim_tokens(slice msg_cs) {
;;     ;; Check if the user has any tokens to claim
;;     ;; int user_tokens = map_get(users_contribution, msg_sender(), 0);
    
;;     slice address = msg_cs~load_msg_addr();

;;     (_, int _user_tokens) = users_contribution.dict_get?(ADDRESS_SIZE, pack_address(address));
    
;;     if (_user_tokens > 0) {
;;         ;; Reset the user's token balance in the map
       
;;         users_contribution~dict_set_builder(ADDRESS_SIZE, pack_address(address), begin_cell().store_int(0, 1));
        
;;         ;; Send the tokens to the user
;;         send_tokens(address, _user_tokens);
        
;;         ;; Operation successful
;;         return 1;
;;     }
    
;;     ;; User has no tokens to claim
;;     return 0;
;; }



;; ;; Function to withdraw TON balance by the owner
;; int withdraw_grams(slice in_msg_body) {
;;     ;; Parse the owner address from the stored cell 
;;     cell b = begin_cell().store_slice(in_msg_body~load_msg_addr()).end_cell();
;;     slice address = in_msg_body~load_msg_addr();
;;     ;; Check if the caller is the owner
;;     (int token_rate,int ton_balance, slice owner_addr_cell) = load_data();

;;     if (equal_slices(address, owner_addr_cell)) {  ;; Correct address check using slice comparison
;;         ;; Transfer the entire TON balance to the owner
    
;;         builder msg = begin_cell() 
;;             .store_slice(owner_addr_cell) ; 

;;         send_raw_message(msg.end_cell(), ton_balance);
        
;;         ;; Reset the TON balance
;;         ton_balance = 0;

;;         ;; Operation successful
;;         return 1;
;;     }
    
;;     ;; Caller is not the owner
;;     return 0;
;; }

 

(int) getUserToken(slice address) method_id {
    load_data();
    (slice value, int _user_tokens) = users_contribution.dict_get?(ADDRESS_SIZE, pack_address(address));
    int coins = 0  ; 
    if(_user_tokens){
        coins = value~load_coins() ; 
    }
     return coins;    
}

;; (int) getUserWhitelisted(slice address) method_id {
;;     (_, int whitelisted) = users_whitelisted.dict_get?(ADDRESS_SIZE, pack_address(address));
;;     return whitelisted;
;; }

(int,int, int, int, slice, cell) getSaleDetails() impure method_id {
    load_data();
    return (token_rate,ton_balance,status,whitelist,owner_addr_cell,project_id);
}


(int,int, int, int, int,int, int, int, slice) getAdvanceSaleDetails() impure method_id {
    load_data();
    return (startTime,endTime,minBuy,maxBuy,hardCap,softCap,liquidityAmount,liquidityRate,token_address);
}



 